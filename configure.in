dnl Process this file with autoconf to produce a configure script.
AC_INIT(flood.c)

dnl Override the default prefix with /pkg/flood-0.1
AC_PREFIX_DEFAULT(/pkg/flood-0.1)

dnl Checks for programs.
AC_PROG_CC
AC_PROG_CPP
AC_PROG_INSTALL
AC_PROG_LN_S
AC_PROG_MAKE_SET

AC_CANONICAL_SYSTEM

AC_MSG_CHECKING([whether threads are to be enabled])
AC_ARG_ENABLE(threads,dnl
[  --enable-threads   enable threads (default=yes)],
enable_threads="$enableval",
if test ".$enable_threads" = .; then
    enable_threads=yes
fi
)dnl
if test ".$enable_threads" = .yes; then
  FLOOD_USE_THREADS=1
  AC_MSG_RESULT(yes)
else
  FLOOD_USE_THREADS=0
  AC_MSG_RESULT(no)
fi

dnl openssl-0.9.x/{include,lib}
AC_ARG_WITH(openssl,
  [  --with-openssl=PATH     Prefix to openssl (default /pkg/openssl-0.9.6b)],
  [if test "$withval" = "yes"; then AC_MSG_ERROR('option --with-openssl requires a path'); else OPENSSL_PREFIX="$withval"; fi],
  [OPENSSL_PREFIX="/pkg/openssl-0.9.6b"])

AC_ARG_WITH(randfile,
  [  --with-randfile=PATH    Path to a random file used by OpenSSL (default /tmp/.rnd)],
  [if test "$withval" = "yes"; then AC_MSG_ERROR('option --with-randfile requires a path'); else RANDFILE="$withval"; fi],
  [RANDFILE="/tmp/.rnd"])

AC_ARG_WITH(capath,
  [  --with-capath=PATH      Path to a directory with c_rehash'd CA files used by OpenSSL (default /tmp/certdir)],
  [if test "$withval" = "yes"; then AC_MSG_ERROR('option --with-capath requires a path'); else CAPATH="$withval"; fi],
  [CAPATH="/tmp/certdir"])

dnl Need for now.  Remove later.
AC_ARG_WITH(httpd,
  [  --with-httpd=PATH       Prefix to httpd-2.0 (default /home/jerenkrantz/cvs-apache/httpd-2.0)],
  [if test "$withval" = "yes"; then AC_MSG_ERROR('option --with-httpd requires a path'); else HTTPD_SOURCE="$withval"; fi],
  [HTTPD_SOURCE="/home/jerenkrantz/cvs-apache/httpd-2.0"])

AC_ARG_WITH(apr,
  [  --with-apr=PATH         Prefix to apr (default ${HTTPD_SOURCE}/srclib/apr)],
  [if test "$withval" = "yes"; then AC_MSG_ERROR('option --with-apr requires a path'); else APR_SOURCE="$withval"; fi],
  [APR_SOURCE="$HTTPD_SOURCE/srclib/apr"])

AC_ARG_WITH(apr,
  [  --with-apr-util=PATH    Prefix to apr-util (default ${HTTPD_SOURCE}/srclib/apr-util)],
  [if test "$withval" = "yes"; then AC_MSG_ERROR('option --with-apr-util requires a path'); else APU_SOURCE="$withval"; fi],
  [APU_SOURCE="$HTTPD_SOURCE/srclib/apr-util"])

. $APR_SOURCE/APRVARS

EXTRA_CPPFLAGS="$EXTRA_CPPFLAGS -I${OPENSSL_PREFIX}/include"

EXTRA_LDFLAGS="$EXTRA_LDFLAGS -L${OPENSSL_PREFIX}/lib"

case "$host" in
  *-solaris2*)
      EXTRA_LDFLAGS="$EXTRA_LDFLAGS -R${OPENSSL_PREFIX}/lib"
      ;;
  *linux*)
      ;;
esac

dnl Use our specified *FLAGS when testing for the libraries.
LDFLAGS="$LDFLAGS $EXTRA_LDFLAGS"
LIBS="$LIBS $EXTRA_LIBS"
CPPFLAGS="$CPPFLAGS $EXTRA_CPPFLAGS"
CFLAGS="$CFLAGS $EXTRA_CFLAGS"

dnl Checks for libraries.
dnl Replace `main' with a function in -lcrypto:
AC_CHECK_LIB(crypto, SHA1)
AC_CHECK_LIB(ssl, SSL_library_init)

AC_CHECK_FUNC(rand, hasrand="1", hasrand="0")
AC_CHECK_FUNC(lrand48, hasrand48="1", hasrand48="0")
AC_CHECK_FUNC(random, hasrandom="1", hasrandom="0")

AC_MSG_CHECKING([random number generator to use])
prngrand="0"
prngrand48="0"
prngrandom="0"
if test $hasrandom = "1"; then
    prngrandom="1"
    AC_MSG_RESULT([random])
else if $hasrand48 = "1"; then
    prngrand48="1"
    AC_MSG_RESULT([rand48])
else if $hasrand = "1"; then
    prngrand="1"
    AC_MSG_RESULT([rand])
fi
fi
fi

AC_SUBST(FLOOD_USE_THREADS)
AC_SUBST(OPENSSL_PREFIX)
AC_SUBST(RANDFILE)
AC_SUBST(CAPATH)
AC_SUBST(HTTPD_SOURCE)
AC_SUBST(APR_SOURCE)
AC_SUBST(APU_SOURCE)
AC_SUBST(EXTRA_CFLAGS)
AC_SUBST(EXTRA_CPPFLAGS)
AC_SUBST(EXTRA_LDFLAGS)
AC_SUBST(EXTRA_LIBS)
AC_SUBST(prngrand)
AC_SUBST(prngrand48)
AC_SUBST(prngrandom)

dnl Makefile outputs
dnl Note: There can only be one AC_OUTPUT command.
AC_OUTPUT(
  Makefile
  config.h
)
